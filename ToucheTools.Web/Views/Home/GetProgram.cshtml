@using ToucheTools.Web.Services
@model ToucheTools.Models.ProgramDataModel
@inject IModelStorageService _modelStorageService
@{
    string sessionId = "";
    if (Context.Request.Query.TryGetValue("id", out var val))
    {
        sessionId = val[0];
    }
    bool loggedIn = false;
    ModelContainer? container = null;
    string initialFilename = "";
    Dictionary<string, string> routeData = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(sessionId))
    {
        loggedIn = _modelStorageService.TryGetModels(sessionId, out container);
        if (!loggedIn)
        {
            sessionId = "";
        }
        else
        {
            initialFilename = container.InitialFilename;
            routeData["id"] = sessionId;
        }
    }
}

@if (!loggedIn)
{
    <script>
        window.location.href = "/";
    </script>
    return;
}

@{
    var programIdRaw = (string)(Context.Request.RouteValues["program"]);
    if (string.IsNullOrEmpty(programIdRaw))
    {
        throw new Exception("Unknown program");
    }
    var programId = int.Parse(programIdRaw);
}

<div>
    <h1 class="display-4">Program @programId</h1>
    <h5 class="display-5">Rectangles</h5>
    <ul>
        @for (var i = 0; i < Model.Rects.Count; i++)
        {
            var rect = Model.Rects[i];
            <li><span class="text-dark fw-bold">@i - </span><span class="text-dark">@rect.X x @rect.Y to @(rect.X + rect.W) x @(rect.Y + rect.H)</span></li>
        }
    </ul>
    
    <h5 class="display-5">Points</h5>
    <ul>
        @for (var i = 0; i < Model.Points.Count; i++)
        {
            var point = Model.Points[i];
            <li><span class="text-dark fw-bold">@i - </span><span class="text-dark">@point.X x @point.Y x @point.Z order @point.Order</span></li>
        }
    </ul>
    
    <h5 class="display-5">Areas</h5>
    <ul>
        @for (var i = 0; i < Model.Areas.Count; i++)
        {
            var area = Model.Areas[i];
            var rect = area.Rect;
            <li><span class="text-dark fw-bold">@i - </span>
                <span class="text-dark">@area.Id 
                with rect @rect.X x @rect.Y to @(rect.X+rect.W) x @(rect.Y + rect.H), 
                with source @area.SrcX x @area.SrcY, 
                with state @area.State, 
                animation @area.AnimationCount @area.AnimationNext</span></li>
        }
    </ul>
    
    <h5 class="display-5">Walks</h5>
    <ul>
        @for (var i = 0; i < Model.Walks.Count; i++)
        {
            var walk = Model.Walks[i];
            <li><span class="text-dark fw-bold">@i - </span><span class="text-dark">Point @walk.Point1 to point @walk.Point2, clip rect @walk.ClipRect, areas @walk.Area1 @walk.Area2</span></li>
        }
    </ul>
    
    <h5 class="display-5">Backgrounds</h5>
    <ul>
        @for (var i = 0; i < Model.Backgrounds.Count; i++)
        {
            var bg = Model.Backgrounds[i];
            var rect = bg.Rect;
            <li><span class="text-dark fw-bold">@i - </span>
                <span class="text-dark">@bg.Type 
                    with rect @rect.X x @rect.Y to @(rect.X+rect.W) x @(rect.Y + rect.H), 
                    with source @bg.SrcX x @bg.SrcY, 
                    with offset @bg.Offset, 
                    scale @bg.ScaleMul div @bg.ScaleDiv</span></li>
        }
    </ul>
    
    
    <h5 class="display-5">Hitboxes</h5>
    <ul>
        @for (var i = 0; i < Model.Hitboxes.Count; i++)
        {
            var hitbox = Model.Hitboxes[i];
            var rect1 = hitbox.Rect1;
            var rect2 = hitbox.Rect2;
            <li><span class="text-dark fw-bold">@i - </span>
                <span class="text-dark">@hitbox.Item 
                    with rect1 @rect1.X x @rect1.Y to @(rect1.X+rect1.W) x @(rect1.Y + rect1.H),
                    with rect2 @rect2.X x @rect2.Y to @(rect2.X+rect2.W) x @(rect2.Y + rect2.H),
                    with talk @hitbox.Talk, state @hitbox.State,
                    with string @hitbox.String, default @hitbox.DefaultString,
                    with actions @string.Join(", ", hitbox.Actions)</span></li>
        }
    </ul>
    
    <h5 class="display-5">Action Script Offsets</h5>
    <ul>
        @for (var i = 0; i < Model.ActionScriptOffsets.Count; i++)
        {
            var aso = Model.ActionScriptOffsets[i];
            <li><span class="text-dark fw-bold">@i - </span><span class="text-dark">@aso.Object1 does @aso.Action to @aso.Object2 offset @aso.Offset</span></li>
        }
    </ul>
    
    <h5 class="display-5">Conversations</h5>
    <ul>
        @for (var i = 0; i < Model.Conversations.Count; i++)
        {
            var conv = Model.Conversations[i];
            <li><span class="text-dark fw-bold">@i - </span><span class="text-dark">@conv.Num offset @conv.Offset msg @conv.Message</span></li>
        }
    </ul>

    <h5 class="display-5">Instructions</h5>
    <ul>
        @foreach (var instruction in Model.Instructions)
        {
            <li><span class="text-dark">@instruction.ToString()</span></li>
        }
    </ul>
</div>