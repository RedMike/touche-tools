@using ToucheTools.Web.Services
@model ToucheTools.Models.DatabaseModel
@inject IModelStorageService _modelStorageService
@inject IImageRenderingService _imageRenderingService
@{
    string sessionId = "";
    if (Context.Request.Query.TryGetValue("id", out var val))
    {
        sessionId = val[0];
    }
    bool loggedIn = false;
    ModelContainer? container = null;
    string initialFilename = "";
    Dictionary<string, string> routeData = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(sessionId))
    {
        loggedIn = _modelStorageService.TryGetModels(sessionId, out container);
        if (!loggedIn)
        {
            sessionId = "";
        }
        else
        {
            initialFilename = container.InitialFilename;
            routeData["id"] = sessionId;
        }
    }
}

@if (!loggedIn)
{
    <script>
        window.location.href = "/";
    </script>
    return;
}

@{
    var sequenceIdRaw = (string)(Context.Request.RouteValues["sequence"]);
    if (string.IsNullOrEmpty(sequenceIdRaw))
    {
        throw new Exception("Unknown sequence");
    }
    var sequenceId = int.Parse(sequenceIdRaw);
    
    var spriteIdRaw = (string)(Context.Request.Query["sprite"]);
    if (string.IsNullOrEmpty(spriteIdRaw))
    {
        spriteIdRaw = "0";
    }
    var spriteId = int.Parse(spriteIdRaw);
    
    var paletteId = container.DatabaseModel.Palettes.First().Key;
    var paletteIdRaw = (string)(Context.Request.Query["palette"]);
    if (!string.IsNullOrEmpty(paletteIdRaw))
    {
        paletteId = int.Parse(paletteIdRaw);
    }
    var palette = container.DatabaseModel.Palettes[paletteId];

    var summary = !string.IsNullOrEmpty((string)(Context.Request.Query["summary"]));
    var detailed = !string.IsNullOrEmpty((string)(Context.Request.Query["detailed"]));
}

<div>
    <form asp-area="" asp-controller="Home" asp-action="GetSequence" asp-all-route-data="routeData" method="get">
        <input type="hidden" name="id" value="@sessionId"/>
        <div class="row mb-3">
            <div class="col-8">
                <select class="form-select" name="palette">
                    @{
                        bool selectFirst = container.DatabaseModel.Palettes.All(p => p.Key != paletteId);
                        foreach (var pair in container.DatabaseModel.Palettes)
                        {
                            var selected = paletteId == pair.Key;
                            if (selectFirst)
                            {
                                selected = true;
                                selectFirst = false;
                            }
                            <option selected=@(selected ? "selected" : null) value="@pair.Key">Room @pair.Key</option>
                        }
                    }
                </select>
            </div>
            <div class="d-grid col-4">
                <button type="submit" class="btn btn-primary">Switch</button>
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-8">
                <select class="form-select" name="sprite">
                    @{
                        bool selectFirstSprite = container.DatabaseModel.Sprites.All(p => p.Key != spriteId);
                        foreach (var pair in container.DatabaseModel.Sprites)
                        {
                            var selected = spriteId == pair.Key;
                            if (selectFirstSprite)
                            {
                                selected = true;
                                selectFirstSprite = false;
                            }
                            <option selected=@(selected ? "selected" : null) value="@pair.Key">Sprite @pair.Key</option>
                        }
                    }
                </select>
            </div>
            <div class="d-grid col-4">
                <button type="submit" class="btn btn-primary">Switch</button>
            </div>
        </div>
    </form>
    <h1 class="display-3">Sequence @sequenceId</h1>
    @{
        var sequence = Model.Sequences[sequenceId];

        if (summary)
        {
            <ul>
                @foreach (var charPair in sequence.Characters)
                {
                    <li>Character @charPair.Key</li>
                    <ul>
                        @foreach (var animPair in charPair.Value.Animations)
                        {
                            <li>Animation @animPair.Key</li>
                            <ul>
                                @foreach (var dirPair in animPair.Value.Directions)
                                {
                                    <li>Direction @dirPair.Key</li>
                                    <ul>
                                        @{ var frameId = 0; }
                                        @foreach (var frame in dirPair.Value.Frames)
                                        {
                                            <li>Frame @(frameId++): @frame.Parts.Count</li>
                                        }
                                    </ul>
                                }
                            </ul>
                        }
                    </ul>
                }
            </ul>  
        } else if (detailed)
        {
            foreach (var charPair in sequence.Characters)
            {
                <h5 class="display-4">Character @charPair.Key</h5>
                <p><span class="fw-bold">Frame Dir Flag:</span> <span>@charPair.Value.FrameDirFlag</span></p>
                foreach (var animPair in charPair.Value.Animations)
                {
                    <h5 class="display-5">Animation @animPair.Key</h5>
                    foreach (var dirPair in animPair.Value.Directions)
                    {
                        <h5 class="display-6">Direction @dirPair.Key</h5>
                        <ul>
                            @{
                                var frameId = 0;
                                foreach (var frame in dirPair.Value.Frames)
                                {
                                    <li>Frame @frameId</li>
                                    <ul>
                                        <li><span class="fw-bold">Walk DX:</span> <span>@frame.WalkDx</span></li>
                                        <li><span class="fw-bold">Walk DY:</span> <span>@frame.WalkDy</span></li>
                                        <li><span class="fw-bold">Walk DZ:</span> <span>@frame.WalkDz</span></li>
                                        <li><span class="fw-bold">Delay:</span> <span>@frame.Delay</span></li>
                                        <li><img src="@Url.Action("GetSequenceImage", "Home", new { sequence = sequenceId, characterId = charPair.Key, animationId = animPair.Key, directionId = dirPair.Key, frameId = frameId, id = sessionId, sprite = spriteId, palette = paletteId })"/></li>
                                        <li>Parts</li>
                                        <ul>
                                            @{
                                                var partId = 0;
                                                foreach (var part in frame.Parts)
                                                {
                                                    <li>Part @partId</li>
                                                    <ul>
                                                        <li><span class="fw-bold">Frame Index:</span> <span>@part.FrameIndex</span></li>
                                                        <li><span class="fw-bold">Dest X:</span> <span>@part.DestX</span></li>
                                                        <li><span class="fw-bold">Dest Y:</span> <span>@part.DestY</span></li>
                                                        <li><span class="fw-bold">V Flipped:</span> <span>@(part.VFlipped ? "yes" : "no")</span></li>
                                                        <li><span class="fw-bold">H Flipped:</span> <span>@(part.HFlipped ? "yes" : "no")</span></li>
                                                        @{ partId++; }
                                                    </ul>
                                                }
                                            }
                                        </ul>
                                        @{ frameId++; }
                                    </ul>
                                }
                            }
                        </ul>
                    }
                }
            }
        }
        else
        {
            foreach (var charPair in sequence.Characters)
            {
                <h5 class="display-4">Character @charPair.Key</h5>
                foreach (var animPair in charPair.Value.Animations)
                {
                    <h5 class="display-5">Animation @animPair.Key</h5>
                    foreach (var dirPair in animPair.Value.Directions)
                    {
                        <h5 class="display-6">Direction @dirPair.Key</h5>
                        <img src="@Url.Action("GetSequenceImageAnimation", "Home", new { sequence = sequenceId, characterId = charPair.Key, animationId = animPair.Key, directionId = dirPair.Key, id = sessionId, sprite = spriteId, palette = paletteId })"/>
                    }
                }
            }
        }
    }
    
</div>