@using ToucheTools.Web.Services
@model Lazy<ToucheTools.Models.SpriteImageDataModel>
@inject IModelStorageService _modelStorageService
@inject IImageRenderingService _imageRenderingService
@{
    string sessionId = "";
    if (Context.Request.Query.TryGetValue("id", out var val))
    {
        sessionId = val[0];
    }
    bool loggedIn = false;
    ModelContainer? container = null;
    string initialFilename = "";
    Dictionary<string, string> routeData = new Dictionary<string, string>();
    if (!string.IsNullOrEmpty(sessionId))
    {
        loggedIn = _modelStorageService.TryGetModels(sessionId, out container);
        if (!loggedIn)
        {
            sessionId = "";
        }
        else
        {
            initialFilename = container.InitialFilename;
            routeData["id"] = sessionId;
        }
    }
}

@if (!loggedIn)
{
    <script>
        window.location.href = "/";
    </script>
    return;
}

@{
    var spriteIdRaw = (string)(Context.Request.RouteValues["sprite"]);
    if (string.IsNullOrEmpty(spriteIdRaw))
    {
        throw new Exception("Unknown sprite");
    }
    var spriteId = int.Parse(spriteIdRaw);
    var paletteId = container.DatabaseModel.Palettes.First().Key;
    var raw = !string.IsNullOrEmpty((string)(Context.Request.Query["raw"]));
    var paletteIdRaw = (string)(Context.Request.Query["palette"]);
    if (!string.IsNullOrEmpty(paletteIdRaw))
    {
        paletteId = int.Parse(paletteIdRaw);
    }
    var palette = container.DatabaseModel.Palettes[paletteId];
    var spriteImage = Model.Value;
    var spriteImageBytes = _imageRenderingService.RenderImage(spriteImage, palette.Colors, raw);
    var spriteImageBase64 = Convert.ToBase64String(spriteImageBytes);
    var imageData = "data:image/png;base64," + spriteImageBase64;
}

<div>
    <form asp-area="" asp-controller="Home" asp-action="GetSprite" asp-all-route-data="routeData" method="get">
        <input type="hidden" name="id" value="@sessionId"/>
        <div class="row mb-3">
            <div class="col-8">
                <select class="form-select" name="palette">
                    @{
                        bool selectFirst = container.DatabaseModel.Palettes.All(p => p.Key != paletteId);
                        foreach (var pair in container.DatabaseModel.Palettes)
                        {
                            var selected = paletteId == pair.Key;
                            if (selectFirst)
                            {
                                selected = true;
                                selectFirst = false;
                            }
                            <option selected=@(selected ? "selected" : null) value="@pair.Key">Room @pair.Key</option>
                        }
                    }
                </select>
            </div>
            <div class="d-grid col-4">
                <button type="submit" class="btn btn-primary">Switch</button>
            </div>
        </div>
    </form>
    <h1 class="display-4">Sprite @spriteId</h1>
    <img src="@imageData" alt="preview"/>
    <h5 class="display-5">Info</h5>
    <p>Width: <span>@spriteImage.Width</span>, Height: <span>@spriteImage.Height</span></p>
    <p>Individual width: <span>@spriteImage.SpriteWidth</span>, Individual height: <span>@spriteImage.SpriteHeight</span></p>
</div>